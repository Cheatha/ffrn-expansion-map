#!/usr/bin/env python3

import requests
import json
import copy
import sys
from argparse import ArgumentParser
from collections import namedtuple
from requests.compat import urljoin

formats = 'nodelist', 'ffmap'
Position = namedtuple('Position', ['lat', 'lng'])

geojson_area = {
    'type': 'Feature',
    'properties': {},
    'geometry': {
        'type': 'Polygon',
        'coordinates': []
    }
}
geojson_frame = {
    'type': 'FeatureCollection',
    'features': []
}


def fetch(url, maptype):
    """
    fetch node information
    :param url: data location
    :param maptype: data format
    :return:
    """
    response = requests.get(url)
    document = response.json()

    if maptype == 'ffmap':
        return {node['id']: Position(lat=node['geo'][0], lng=node['geo'][1])
                for node in document['nodes']
                if node['geo']}
    elif maptype == 'nodelist':
        return {node['id']: Position(lat=node['position']['lat'], lng=node['position']['long'])
                for node in document['nodes']
                if 'position' in node}


def query_administrative_areas(position):
    """
    fetch administrative area information for a position
    :param position: namedtuple containg latitude and longitude
    :return: areas
    """
    baseurl = 'http://global.mapit.mysociety.org'
    endpoint = '/point/{SRID}/{lng},{lat}'.format(SRID=4326, lat=position.lat, lng=position.lng)

    response = requests.get(urljoin(baseurl, endpoint))

    return response.json()


def query_area_geojson(area_id):
    """
    fetch geojson information for area
    :param area_id: key
    :return: geojson
    """
    baseurl = 'http://global.mapit.mysociety.org'
    endpoint = '/area/{id}.geojson'.format(id=area_id)

    response = requests.get(urljoin(baseurl, endpoint))

    return response.json()


def get_municipal_area(areas):
    """
    return the most local municipal area
    :param areas: candidate administrative areas
    :return most local area key
    """
    def is_municipal(area_type):
        return area_type in 'O06', 'O07', 'O08'

    return max(filter(is_municipal, areas), key=lambda i: int(areas[i]['type'][1:]))


def main(url, format):
    # get node information
    nodes = fetch(url, format)

    distribution = {}
    for node, position in nodes.items():
        # get administrative area information
        areas = query_administrative_areas(position)

        # find the most local administrative area
        local = areas[get_municipal_area(areas)]

        area_type = int(local['type'][1:])
        # we only care about municipal borders
        # see http://wiki.openstreetmap.org/wiki/DE:Grenze
        if 6 <= area_type <= 8:
            if local['id'] in distribution:
                distribution[local['id']]['count'] += 1
            else:
                distribution[local['id']] = {'name': local['name'], 'count': 1}
        else:
            print('No appropriate administrative layer found for {}: {}'.format(node, position), file=sys.stderr)

    areas = []
    for area, data in distribution.items():
        # get geojson for area to copy polygon coordinates
        polygon = query_area_geojson(area)

        # deepcopy template, reference polygon information
        instance = copy.deepcopy(geojson_area)
        instance['properties']['name'] = data['name']
        instance['properties']['count'] = data['count']

        instance['geometry']['type'] = polygon['type']
        instance['geometry']['coordinates'] = polygon['coordinates']

        areas.append(instance)

    with open('nodes.geojson', 'w') as handle:
        frame = geojson_frame
        frame['features'] = areas
        handle.write(json.dumps(frame))


if __name__ == '__main__':
    parser = ArgumentParser()

    parser.add_argument('-f', '--format', choices=formats, default=formats[0])
    parser.add_argument('url', metavar='URL')

    args = parser.parse_args()

    main(args.url, args.format)


